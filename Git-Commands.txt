Git Configuration

Configuration is primarily found in three levels:

- Repo (local)
- User account (global)
- Git installation (system)


#Local (repository)
git config —local user.name “Junaid388”

# Global (user directory)
git config —global user.name “Junaid”

# System (git installation)
git config —system user.name “Junaid”   



#show all config values and the file where they are defined
git config —list —show-origin 

# show the current user.name config value (sub and key)
git config user.name


#Remove a specific setting for a specific level of config
git config —global —unset user.name

#Edit a specific level of config directly
git config —global edit #will open in default editor

#Remove a section of config for a specific level
git config —global —remove-section user

# Setting default editor
git config —local core.editor “code —new-window —wait” 


# To see the difference of files
git difftool

git merge tool

# Checkout at branch
git checkout -b develop    # git checkout master

# commit the changes to a branch
git commit -m “comment.”     

#merging the current repo with the specified repo
git merge develop  

#Setting alias
git config —global alias.st status 


 #Define attributes setting
git config --global diff.exif.textconv exiftool

#smude the sensitive data
git config --local filter.updateAPIKey.smudge ‘sed “s/{SECURE_API_KEY}/a1693afecca123/“‘

#clean the sensitive data
git config --local filter.updateAPIKey.clean ‘sed “s/a1693afecca123/{SECURE_API_KEY}/“‘

# the above changes will be reflected once we made changes in .gitignore
*.js  filter=updateAPIKey

# Adding a submodule

# Adds a submodule to the repo in the 'external/repo1' directory 
git submodule add https://github.com/junaid388/exmple-submodule.git external/repo1 

# Cloning a Repository with submodules 

# Clone the repository
git clone https://github.com/junaid388/my-repo.git

# Initialize submodules
git submodule init

# Grab the content of the submodules
git submodule update  

# Removing a submodule from a repository

# Temporarily remove the repository
git submodule deinit external/repo1

# Permanently remove the repository
git submodule deinit external/repo1
git rm external/repo1
git commit -m "Removed project submodule repo1"

#Verrsion

git --version 

# To get the info of submodules
git config --global status.submoduleSummary true

git config --global diff.submodule log  

git submodule init
git submodule update

git fetch    


# add all submodules
git clone --recursive https:github.com/junaid388/repo.git repo1

# Git hooks

A pre-defined script that is executed in response to a specific action that has occurred within your Git repository.
-------------------------------------------------------------------------------------------------------------------------------------------------
|	Client-side Hooks						|			Server-side Hooks				|
-------------------------------------------------------------------------------------------------------------------------------------------------
|Commit Initiated				Commit			|				Repository Updated			|
|		pre-commit	prepare-commit	commit	post-commit	PUSH	pre-receive	update				post-receive	|
------------------------------------------------------------------------------------------------------------------------------------------------


# create a custom git command
# create a file with your command name
Insert the script you want to run once you run the command

echo 'export PATH="Users/junaid/git-scripts:$PATH"' >> ~/.zshrx or bash profile
Source ~/.zshrc

You can run the script by
git commonad-name  


Git Bisect
A tool included with Git that enables you to specify a start and end commit and either manually or automatically determine the point of failure within that range of commits.

# Start the biscuit process
git bisect start

# Specify good and bad commits
git bisect good cd93e60
git bisect bad b7cd593   

git bisect bad # continue from start to end one by one 

git show # to show the bad committed file 

git bisect reset

git log --pretty=oneline  
 